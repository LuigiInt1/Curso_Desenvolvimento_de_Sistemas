SET SQL_SAFE_UPDATES = 0;

DROP DATABASE IF EXISTS DBCANTINA;
CREATE DATABASE DBCANTINA;

USE DBCANTINA;

CREATE TABLE CLIENTE (
	IDCLIENTE INT NOT NULL AUTO_INCREMENT
	, NOME VARCHAR(100)
	, SEXO CHAR(1)
	, PRIMARY KEY (IDCLIENTE)
);

CREATE TABLE PRODUTO (
	IDPRODUTO INT NOT NULL AUTO_INCREMENT
	, NOME VARCHAR(100)
	, PRECO NUMERIC(8,2)
	, CATEGORIA VARCHAR(50)
	, PRIMARY KEY (IDPRODUTO)
);

CREATE TABLE PEDIDO (
	IDPEDIDO INT NOT NULL AUTO_INCREMENT
	, IDCLIENTE INT NOT NULL
	, DTPEDIDO DATE
	, PRIMARY KEY(IDPEDIDO)
	, FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE (IDCLIENTE)
);

CREATE TABLE ITEM_PEDIDO (
	IDPEDIDO INT NOT NULL 
	, IDPRODUTO INT NOT NULL
	, QTDE INT
	, PRECO_UNITARIO NUMERIC(8,2)
	, PRIMARY KEY (IDPEDIDO, IDPRODUTO)
	, FOREIGN KEY (IDPEDIDO) REFERENCES PEDIDO (IDPEDIDO)
	, FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO (IDPRODUTO)
);

INSERT INTO CLIENTE (NOME, SEXO)VALUES('JOAO', 'M');
INSERT INTO CLIENTE (NOME, SEXO)VALUES('MARIA', 'F');
INSERT INTO CLIENTE (NOME, SEXO)VALUES('ANA', 'F');
INSERT INTO CLIENTE (NOME, SEXO)VALUES('CARLOS', 'M');
INSERT INTO CLIENTE (NOME, SEXO)VALUES('ANTONIO', 'M');

INSERT INTO PRODUTO (NOME, PRECO, CATEGORIA)VALUES('BOLO DE CHOCOLATE', 2.5, 'DOCE');
INSERT INTO PRODUTO (NOME, PRECO, CATEGORIA)VALUES('BOLO DE CENOURA', 2.5, 'DOCE');
INSERT INTO PRODUTO (NOME, PRECO, CATEGORIA)VALUES('SUCO DE LARANJA', 3.0, 'SUCO');
INSERT INTO PRODUTO (NOME, PRECO, CATEGORIA)VALUES('SUCO DE MORANGO', 4.0, 'SUCO');
INSERT INTO PRODUTO (NOME, PRECO, CATEGORIA)VALUES('MISTO QUENTE', 1.5, 'SALGADO');

INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(1, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(1, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(2, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(2, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(3, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(1, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(1, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(2, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(2, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(2, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(5, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(3, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(5, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(1, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));
INSERT INTO PEDIDO (IDCLIENTE, DTPEDIDO)VALUES(2, DATE_ADD(NOW(), INTERVAL RAND() * - 100 DAY));

INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (01, 1, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (02, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (03, 3, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (01, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (02, 1, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (04, 4, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (05, 5, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (06, 1, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (05, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (07, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (08, 3, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (11, 4, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (12, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (10, 3, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (11, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (09, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (09, 4, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (10, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (11, 5, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (12, 4, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (10, 5, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (11, 1, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (14, 2, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (15, 5, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (13, 4, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (14, 4, RAND() * 10);
INSERT INTO ITEM_PEDIDO (IDPEDIDO, IDPRODUTO, QTDE)VALUES (15, 3, RAND() * 10);

UPDATE ITEM_PEDIDO AS PED
SET PRECO_UNITARIO = (SELECT PRECO FROM PRODUTO WHERE IDPRODUTO = PED.IDPRODUTO);

-- 7) Crie uma consulta SQL para listar o sexo e a quantidade de
-- cliente com cada sexo. 

	SELECT
    COUNT(CLIENTE.IDCLIENTE),
    CLIENTE.SEXO
    FROM
    CLIENTE
    GROUP BY
    CLIENTE.SEXO;
    
-- 8) Crie uma consulta SQL para listar o nome do produto e o preco
-- do produto, ordene o resultado categoria do produto em
-- seguida pelo nome do produto.

	SELECT
    PRODUTO.NOME,
    PRODUTO.PRECO
    FROM
    PRODUTO
    ORDER BY
    PRODUTO.CATEGORIA,
    PRODUTO.NOME;
    
-- 9) Crie uma consulta SQL para listar a categoria do produto, a
-- quantidade de produto e a media dos valores dos produtos de
-- cada categoria, ordenado pelo nome da categoria

	SELECT
    PRODUTO.CATEGORIA,
	COUNT(PRODUTO.IDPRODUTO),
    AVG(PRODUTO.PRECO)
    FROM
    PRODUTO
    GROUP BY
    PRODUTO.CATEGORIA
    ORDER BY
    PRODUTO.CATEGORIA;
    
-- 10) Na tabela item_pedido armazena a quantidade que cada
-- produto foi vendida nos pedidos, sendo assim, crie uma
-- consulta SQL para listar o código identificador do produto, a
-- quantidade de itens vendido, o valor de cada produto

	SELECT
	PRODUTO.IDPRODUTO,
    SUM(ITEM_PEDIDO.QTDE),
    PRODUTO.PRECO
    FROM
    PRODUTO
    INNER JOIN ITEM_PEDIDO ON
    PRODUTO.IDPRODUTO = ITEM_PEDIDO.IDPRODUTO
    GROUP BY 
    PRODUTO.IDPRODUTO, PRODUTO.PRECO;
    
/*11) Para saber o valor total de um item em um pedido você deve
multiplicar o preco_unitario pela quantidade na tabela de
item_pedido, sendo assim, crie uma consulta SQL para listar o
codido do pedido, o código do produto, o preço unitário, a
quantidade vendida e o valor total do item. Ordene o resultado
pelo código do pedido e pelo código do produto*/

SELECT
ITEM_PEDIDO.IDPEDIDO,
PRODUTO.IDPRODUTO,
ITEM_PEDIDO.PRECO_UNITARIO,
ITEM_PEDIDO.QTDE,
ITEM_PEDIDO.QTDE*ITEM_PEDIDO.PRECO_UNITARIO
FROM
PRODUTO
INNER JOIN ITEM_PEDIDO ON
PRODUTO.IDPRODUTO = ITEM_PEDIDO.IDPRODUTO
ORDER BY
ITEM_PEDIDO.IDPEDIDO,
PRODUTO.IDPRODUTO;

/* 12) Crie uma consulta SQL para listar a quantidade de pedido
(para pegar a quantidade correta de pedido use count(distinct
idpedido), a media de item vendido, e o valor total médio*/

SELECT
count(distinct idpedido),
AVG(ITEM_PEDIDO.QTDE),
AVG(ITEM_PEDIDO.QTDE * ITEM_PEDIDO.PRECO_UNITARIO)
FROM
ITEM_PEDIDO;

/* 13) Crie uma consulta SQL para listar todos os pedidos do cliente
com código identificador igual 3*/

	SELECT
    *
    FROM
    CLIENTE
    WHERE
    CLIENTE.IDCLIENTE = 3;
    
/* 14) Crie uma consulta SQL para listar o código identificador do
cliente, o nome do cliente e a quantidade de pedido de cada
cliente*/

	SELECT
    CLIENTE.IDCLIENTE,
    CLIENTE.NOME,
    COUNT(PEDIDO.IDPEDIDO)
    FROM
    CLIENTE
    INNER JOIN PEDIDO ON
    CLIENTE.IDCLIENTE = PEDIDO.IDCLIENTE
    GROUP BY
    CLIENTE.IDCLIENTE,
    CLIENTE.NOME;
    
/*15) Crie uma consulta SQL para listar o código identificador do
cliente, o nome do cliente e a quantidade de pedido de cada
cliente. Caso o cliente não tenha pedido ele deve listado
também */
	SELECT
	CLIENTE.IDCLIENTE,
    CLIENTE.NOME,
    COUNT(PEDIDO.IDPEDIDO)
    FROM
    CLIENTE
    LEFT JOIN PEDIDO ON
    CLIENTE.IDCLIENTE = PEDIDO.IDCLIENTE
    GROUP BY
    CLIENTE.IDCLIENTE,
    CLIENTE.NOME;
    
/*16) Crie uma consulta SQL para listar o código identificador do
produto, o nome do produto, a quantidade de pedidos únicos
(distinct), a quantidade vendida de produtos e a media de
produtos vendidos por pedido. Ordene o resultado pelo nome
quantidade vendida de produtos decrescente*/

SELECT
PRODUTO.IDPRODUTO,
PRODUTO.NOME,
count(distinct ITEM_PEDIDO.IDPEDIDO),
SUM(ITEM_PEDIDO.QTDE),
AVG(ITEM_PEDIDO.QTDE)
FROM
ITEM_PEDIDO
INNER JOIN PRODUTO ON
ITEM_PEDIDO.IDPRODUTO = PRODUTO.IDPRODUTO
GROUP BY
PRODUTO.IDPRODUTO,
PRODUTO.NOME
ORDER BY
 4 DESC;
 
 /*17) Crie uma consulta SQL para listar o nome do produto e a
quantidade vendida. Mesmo que o produto não tenha nenhuma
venda ele deve ser listado na consulta*/

SELECT
PRODUTO.NOME,
SUM(ITEM_PEDIDO.QTDE)


FROM
 PRODUTO
    LEFT JOIN ITEM_PEDIDO ON
    PRODUTO.IDPRODUTO = ITEM_PEDIDO.IDPRODUTO
GROUP BY
PRODUTO.NOME;

/*18) Crie uma consulta SQL para lista o código identificador do
	cliente, o nome do cliente e a quantidade de pedido do cliente,
	liste apenas os clientes que tem mais de 5 pedidos, ordene
	pela quantidade de pedido de forma decrescente*/